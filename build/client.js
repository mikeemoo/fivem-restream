/*! For license information please see client.js.LICENSE.txt */
(()=>{var __webpack_modules__={"./src/client/client.ts":(__unused_webpack_module,__unused_webpack_exports,__webpack_require__)=>{eval('RegisterCommand("gothere", () => SetEntityCoords(PlayerPedId(), 269.7664, -320.8406, 46.33287, true, false, false, false), false);\r\nconst pending = {};\r\nconst textures = {};\r\nonNet("restream:texture", (url, streamable) => {\r\n    console.log("got response", url, streamable);\r\n    if (pending[url]) {\r\n        pending[url].res(streamable);\r\n        pending[url] = null;\r\n        console.log("fired callback");\r\n    }\r\n});\r\nconst getTexture = async (url) => {\r\n    if (!textures[url]) {\r\n        emitNet("restream:getTexture", url);\r\n        textures[url] = new Promise(async (resolve, reject) => {\r\n            const streamable = await new Promise((res, rej) => {\r\n                pending[url] = { res, rej };\r\n            });\r\n            console.log("about to register from cache...");\r\n            RegisterStreamingFileFromCache(GetCurrentResourceName(), streamable.modelFileName, streamable.modelCacheKey);\r\n            RegisterStreamingFileFromCache(GetCurrentResourceName(), streamable.textureDictionaryFileName, streamable.textureDictionaryCacheKey);\r\n            RegisterArchetypes(() => [{\r\n                    flags: 32,\r\n                    bbMin: { x: -2.00000000, y: -0.00000030, z: -2.00000000 },\r\n                    bbMax: { x: 2.00000000, y: 0.00000030, z: 2.000000 },\r\n                    bsCentre: { x: 0.0, y: 0.0, z: 0.0 },\r\n                    bsRadius: 2.82843000,\r\n                    name: streamable.modelName,\r\n                    textureDictionary: streamable.textureDictionaryName,\r\n                    assetName: streamable.modelName,\r\n                    assetType: \'ASSET_TYPE_DRAWABLE\',\r\n                    physicsDictionary: \'\',\r\n                    lodDist: 60.00000000,\r\n                    specialAttribute: 0\r\n                }]);\r\n            console.log("registered archetype...");\r\n            const hash = GetHashKey(streamable.modelName);\r\n            RequestModel(hash);\r\n            console.log("requested model...");\r\n            while (!HasModelLoaded(hash)) {\r\n                await new Promise((res) => setTimeout(res, 50));\r\n            }\r\n            console.log("model is loaded...");\r\n            console.log({\r\n                dictionaryName: streamable.textureDictionaryName,\r\n                textureName: "texture"\r\n            });\r\n            resolve({\r\n                dictionaryName: streamable.textureDictionaryName,\r\n                textureName: "texture"\r\n            });\r\n        });\r\n    }\r\n    return Promise.resolve(textures[url]);\r\n};\r\n__webpack_require__.g.exports("getTexture", (url, callback) => getTexture(url).then(callback));\r\n(async () => {\r\n    const texture = await getTexture("https://upload.wikimedia.org/wikipedia/commons/3/33/Tiling_procedural_textures.jpg");\r\n    console.log(texture);\r\n})();\r\n\n\n//# sourceURL=webpack://fivem-restream/./src/client/client.ts?')}},__webpack_require__={};__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}();var __webpack_exports__={};__webpack_modules__["./src/client/client.ts"](0,__webpack_exports__,__webpack_require__)})();