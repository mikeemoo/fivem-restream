/*! For license information please see client.js.LICENSE.txt */
(()=>{var __webpack_modules__={"./src/client/client.ts":(__unused_webpack_module,__unused_webpack_exports,__webpack_require__)=>{eval('const loaded = {};\r\nconst pending = {};\r\nonNet("restream:texture", async (url, definition) => {\r\n    while (!HasStreamedTextureDictLoaded(definition.dictionary)) {\r\n        RequestStreamedTextureDict(definition.dictionary, true);\r\n        await new Promise((res) => setTimeout(res, 500));\r\n    }\r\n    pending[url].res(definition);\r\n});\r\nconst getTexture = async (url) => {\r\n    if (!loaded[url]) {\r\n        loaded[url] = new Promise((res, rej) => {\r\n            pending[url] = { res, rej };\r\n            emitNet("restream:load", url);\r\n        });\r\n    }\r\n    return loaded[url];\r\n};\r\nconst loadRemoteTexture = (url, callback) => {\r\n    (async () => {\r\n        try {\r\n            const definition = await getTexture(url);\r\n            if (callback) {\r\n                callback(null, definition);\r\n            }\r\n        }\r\n        catch (err) {\r\n            callback(err);\r\n        }\r\n    })();\r\n};\r\n__webpack_require__.g.exports("loadRemoteTexture", loadRemoteTexture);\r\n// RegisterCommand("load-texture", async (_source: string, [url]: [string]) => {\r\n//   coinst { dictionary, texture } = loadTexture(url);\r\n//   RemoveReplaceTexture("testobjecttxd01", "testobjecttx01");\r\n//   AddReplaceTexture("testobjecttxd01", "testobjecttx01", dictionary, texture);\r\n// }, false);\r\n\n\n//# sourceURL=webpack://fivem-restream/./src/client/client.ts?')}},__webpack_require__={};__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}();var __webpack_exports__={};__webpack_modules__["./src/client/client.ts"](0,__webpack_exports__,__webpack_require__)})();