import zlib from "zlib";

export default async (name: string, textureName = "texture"): Promise<Buffer> => {

  const headerBuffer = Buffer.from([
      /*0000*/0x52, 0x53, 0x43, 0x37, 0xA5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xA0, 0x00, 0x00, 0x00, 0x50
  ]);

  const contentBuffer = Buffer.from([
      /*0010*/0x0D, 0xF6, 0xAA, 0xB8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00,
      /*0020*/0x40, 0x09, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      /*0030*/0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x04, 0x35, 0x40,
      /*0040*/0xFF, 0xFF, 0xFF, 0xBF, 0xB0, 0x0F, 0xA1, 0xB4, 0xFF, 0xFF, 0xFF, 0xBF, 0x00, 0x00, 0xC0, 0xFF,
      /*0050*/0xFF, 0xFF, 0xFF, 0x3F, 0xB0, 0x0F, 0xA1, 0x34, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0xC0, 0xFF,
      /*0060*/0xC0, 0x01, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      /*0070*/...Array(16).fill(0x00),
      /*0080*/0x00, 0x38, 0x1C, 0x46, 0x00, 0x38, 0x1C, 0x46, 0x00, 0x38, 0x1C, 0x46, 0x00, 0x38, 0x1C, 0x46,
      /*0090*/0x01, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      /*00A0*/0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00,
      /*00B0*/0xC0, 0x01, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x40, 0x01, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00,
              ...Array(144).fill(0x00),
      /*0150*/0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
              ...Array(112).fill(0x00),
      /*01D0*/0x40, 0x02, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
              ...Array(112).fill(0x00),
      /*0250*/0xC0, 0x02, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
              ...Array(112).fill(0x00),
      /*02D0*/0x87, 0xF7, 0xDE, 0x8B, 0x00, 0x00, 0x00, 0x00, 0x40, 0x04, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00,
      /*02E0*/0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x03, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00,
      /*02F0*/0x40, 0x03, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x01, 0x00,
              ...Array(208).fill(0x00),
      /*03D0*/0xFF, 0xFF, 0xFF, 0xBF, 0xB0, 0x0F, 0xA1, 0xB4, 0xFF, 0xFF, 0xFF, 0xBF, 0x00, 0x00, 0x00, 0x00,
      /*03E0*/0xFF, 0xFF, 0xFF, 0x3F, 0xB0, 0x0F, 0xA1, 0x34, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00,
              ...Array(96).fill(0x00),
      /*0450*/0xC0, 0x04, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
              ...Array(112).fill(0x00),
      /*04D0*/0x61, 0xD4, 0xE7, 0xEF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      /*04E0*/0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00,
      /*04F0*/...Array(16).fill(0x00),
      /*0500*/0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x06, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00,
      /*0510*/...Array(16).fill(0x00),
      /*0520*/0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
      /*0530*/0x04, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      /*0540*/0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x05, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00,
              ...Array(128).fill(0x00),
      /*05D0*/0xFF, 0xFF, 0xFF, 0xBF, 0xB0, 0x0F, 0xA1, 0x34, 0xFF, 0xFF, 0xFF, 0xBF, 0x00, 0x00, 0x00, 0x00,
      /*05E0*/0x00, 0x00, 0x80, 0xBF, 0x95, 0xBF, 0x56, 0xB4, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
      /*05F0*/0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x3F, 0xB0, 0x0F, 0xA1, 0x34, 0xFF, 0xFF, 0xFF, 0xBF,
      /*0600*/0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xBF, 0x95, 0xBF, 0x56, 0xB4, 0xFF, 0xFF, 0xFF, 0xFF,
      /*0610*/0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xBF, 0xB0, 0x0F, 0xA1, 0xB4,
      /*0620*/0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xBF, 0x95, 0xBF, 0x56, 0xB4,
      /*0630*/0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xBF, 0xFF, 0xFF, 0xFF, 0x3F,
      /*0640*/0xB0, 0x0F, 0xA1, 0xB4, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xBF,
      /*0650*/0x95, 0xBF, 0x56, 0xB4, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0xBF,
              ...Array(112).fill(0x00),
      /*06D0*/0x30, 0xD5, 0x45, 0xE7, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      /*06E0*/0x80, 0x07, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
              ...Array(160).fill(0x00),
      /*0790*/0x00, 0x00, 0x01, 0x00, 0x03, 0x00, 0x03, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
              ...Array(112).fill(0x00),
      /*0810*/0xBC, 0xBD, 0xE6, 0x34, 0x00, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      /*0820*/0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      /*0830*/0xC0, 0x05, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      /*0840*/0xC0, 0x08, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
              ...Array(128).fill(0x00),
      /*08D0*/0x59, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x04, 0x96, 0x69, 0x99, 0x55, 0x55, 0x55, 0x55, 0x77,
              ...Array(112).fill(0x00),
      /*0950*/0x43, 0xC3, 0x9C, 0x93, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      /*0960*/0xC0, 0x09, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
              ...Array(16).fill(0x00),
      /*0980*/0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
              ...Array(64).fill(0x00),
      /*09D0*/0x40, 0x0A, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
              ...Array(112).fill(0x00),
      /*0A50*/0xC0, 0x0A, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0xD5, 0x46, 0xDF, 0xE4, 0x00, 0x00, 0x00, 0x00,
      /*0A60*/0x07, 0x00, 0x00, 0x80, 0xD0, 0x00, 0x10, 0x01, 0x94, 0x15, 0xAD, 0x18, 0x00, 0x00, 0x00, 0x00,
      /*0A70*/0x01, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
              ...Array(80).fill(0x00),
      /*0AD0*/0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00,
      /*0AE0*/0x01, 0xA5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0B, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00,
      /*0AF0*/0x01, 0xA4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x0B, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00,
      /*0B00*/0x01, 0xA3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x0B, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00,
      /*0B10*/0x01, 0xA2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x0B, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00,
      /*0B20*/0x01, 0xA1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x0B, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00,
      /*0B30*/0x01, 0xA0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x0B, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00,
      /*0B40*/0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F,
      /*0B50*/0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
              ...Array(16).fill(0x00),
      /*0B70*/0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      /*0B80*/0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      /*0B90*/0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      /*0BA0*/0x71, 0x2B, 0xFE, 0xF1, 0xF2, 0x54, 0x8A, 0x94, 0x06, 0x74, 0x43, 0xE9, 0x5D, 0xA3, 0x20, 0x46,
      /*0BB0*/0xF5, 0x9F, 0xDD, 0x32, 0x90, 0xC1, 0x54, 0xBA, 0x1E, 0xFC, 0x9B, 0xD7, 0x00, 0x00, 0x00, 0x00,
              ...Array(80).fill(0x00),
      /*0C10*/0x15, 0xBA, 0x6F, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
              ...Array(16).fill(0x00),
      /*0C30*/0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x0C, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00,
      /*0C40*/0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
              ...Array(64).fill(0x00),
      /*0C90*/0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
              ...Array(112).fill(0),
      /*0D10*/0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,       
              ...Array(4848).fill(0)
  ]);

  // write the object name
  contentBuffer.write(name, 0x140, 'ascii');
  contentBuffer.write(textureName, 0xC80, 'ascii');

  return new Promise((res, rej) => {
    
    zlib.deflateRaw(contentBuffer, (err, resultBuffer) => {
      if (err) {
        return rej(err);
      }
      const finalBuffer = Buffer.concat([
        headerBuffer,
        resultBuffer
      ])
      res(finalBuffer);
    });
  });
};